//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(WebApi.App_Data.CountingKsContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets04ccf5d070703f3042ecd98e892bbfe7a805bc1e87fd27f48ffc8122efc434bc))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets04ccf5d070703f3042ecd98e892bbfe7a805bc1e87fd27f48ffc8122efc434bc : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "04ccf5d070703f3042ecd98e892bbfe7a805bc1e87fd27f48ffc8122efc434bc"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ApiUser")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.AuthToken")
            {
                return GetView1();
            }

            if (extentName == "CountingKsContext.ApiUsers")
            {
                return GetView2();
            }

            if (extentName == "CountingKsContext.AuthTokens")
            {
                return GetView3();
            }

            if (extentName == "CountingKsContext.AuthToken_ApiUser")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Diary")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.DiaryEntry")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Food")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Measure")
            {
                return GetView8();
            }

            if (extentName == "CountingKsContext.Diaries")
            {
                return GetView9();
            }

            if (extentName == "CountingKsContext.DiaryEntries")
            {
                return GetView10();
            }

            if (extentName == "CountingKsContext.DiaryEntry_Diary")
            {
                return GetView11();
            }

            if (extentName == "CountingKsContext.DiaryEntry_FoodItem")
            {
                return GetView12();
            }

            if (extentName == "CountingKsContext.DiaryEntry_Measure")
            {
                return GetView13();
            }

            if (extentName == "CountingKsContext.Foods")
            {
                return GetView14();
            }

            if (extentName == "CountingKsContext.Measures")
            {
                return GetView15();
            }

            if (extentName == "CountingKsContext.Measure_Food")
            {
                return GetView16();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ApiUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiUser
        [CodeFirstDatabaseSchema.ApiUser](T1.ApiUser_Id, T1.ApiUser_Name, T1.ApiUser_Secret, T1.ApiUser_AppId)
    FROM (
        SELECT 
            T.Id AS ApiUser_Id, 
            T.Name AS ApiUser_Name, 
            T.Secret AS ApiUser_Secret, 
            T.AppId AS ApiUser_AppId, 
            True AS _from0
        FROM CountingKsContext.ApiUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AuthToken.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuthToken
        [CodeFirstDatabaseSchema.AuthToken](T3.AuthToken_Id, T3.AuthToken_Token, T3.AuthToken_Expiration, T3.[AuthToken.ApiUser_Id])
    FROM (
        SELECT T1.AuthToken_Id, T1.AuthToken_Token, T1.AuthToken_Expiration, T2.[AuthToken.ApiUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS AuthToken_Id, 
                T.Token AS AuthToken_Token, 
                T.Expiration AS AuthToken_Expiration, 
                True AS _from0
            FROM CountingKsContext.AuthTokens AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AuthToken_ApiUser_Source).Id AS AuthToken_Id, 
                Key(T.AuthToken_ApiUser_Target).Id AS [AuthToken.ApiUser_Id], 
                True AS _from1
            FROM CountingKsContext.AuthToken_ApiUser AS T) AS T2
            ON T1.AuthToken_Id = T2.AuthToken_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.ApiUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiUsers
        [WebApi.App_Data.ApiUser](T1.ApiUser_Id, T1.ApiUser_Name, T1.ApiUser_Secret, T1.ApiUser_AppId)
    FROM (
        SELECT 
            T.Id AS ApiUser_Id, 
            T.Name AS ApiUser_Name, 
            T.Secret AS ApiUser_Secret, 
            T.AppId AS ApiUser_AppId, 
            True AS _from0
        FROM CodeFirstDatabase.ApiUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.AuthTokens.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuthTokens
        [WebApi.App_Data.AuthToken](T1.AuthToken_Id, T1.AuthToken_Token, T1.AuthToken_Expiration) WITH 
        RELATIONSHIP(CREATEREF(CountingKsContext.ApiUsers, ROW(T1.[AuthToken_ApiUser.AuthToken_ApiUser_Target.Id]),[WebApi.App_Data.ApiUser]),[WebApi.App_Data.AuthToken_ApiUser],AuthToken_ApiUser_Source,AuthToken_ApiUser_Target) 
    FROM (
        SELECT 
            T.Id AS AuthToken_Id, 
            T.Token AS AuthToken_Token, 
            T.Expiration AS AuthToken_Expiration, 
            True AS _from0, 
            T.ApiUser_Id AS [AuthToken_ApiUser.AuthToken_ApiUser_Target.Id]
        FROM CodeFirstDatabase.AuthToken AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.AuthToken_ApiUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuthToken_ApiUser
        [WebApi.App_Data.AuthToken_ApiUser](T3.[AuthToken_ApiUser.AuthToken_ApiUser_Source], T3.[AuthToken_ApiUser.AuthToken_ApiUser_Target])
    FROM (
        SELECT -- Constructing AuthToken_ApiUser_Source
            CreateRef(CountingKsContext.AuthTokens, row(T2.[AuthToken_ApiUser.AuthToken_ApiUser_Source.Id]), [WebApi.App_Data.AuthToken]) AS [AuthToken_ApiUser.AuthToken_ApiUser_Source], 
            T2.[AuthToken_ApiUser.AuthToken_ApiUser_Target]
        FROM (
            SELECT -- Constructing AuthToken_ApiUser_Target
                T1.[AuthToken_ApiUser.AuthToken_ApiUser_Source.Id], 
                CreateRef(CountingKsContext.ApiUsers, row(T1.[AuthToken_ApiUser.AuthToken_ApiUser_Target.Id]), [WebApi.App_Data.ApiUser]) AS [AuthToken_ApiUser.AuthToken_ApiUser_Target]
            FROM (
                SELECT 
                    T.Id AS [AuthToken_ApiUser.AuthToken_ApiUser_Source.Id], 
                    T.ApiUser_Id AS [AuthToken_ApiUser.AuthToken_ApiUser_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.AuthToken AS T
                WHERE T.ApiUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Diary.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Diary
        [CodeFirstDatabaseSchema.Diary](T1.Diary_Id, T1.Diary_CurrentDate, T1.Diary_UserName)
    FROM (
        SELECT 
            T.Id AS Diary_Id, 
            T.CurrentDate AS Diary_CurrentDate, 
            T.UserName AS Diary_UserName, 
            True AS _from0
        FROM CountingKsContext.Diaries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DiaryEntry.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DiaryEntry
        [CodeFirstDatabaseSchema.DiaryEntry](T5.DiaryEntry_Id, T5.DiaryEntry_Quantity, T5.[DiaryEntry.Diary_Id], T5.[DiaryEntry.FoodItem_Id], T5.[DiaryEntry.Measure_Id])
    FROM (
        SELECT T1.DiaryEntry_Id, T1.DiaryEntry_Quantity, T3.[DiaryEntry.Diary_Id], T2.[DiaryEntry.FoodItem_Id], T4.[DiaryEntry.Measure_Id], (T4._from0 AND T4._from0 IS NOT NULL) AS _from0, T1._from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2, (T2._from3 AND T2._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS DiaryEntry_Id, 
                T.Quantity AS DiaryEntry_Quantity, 
                True AS _from1
            FROM CountingKsContext.DiaryEntries AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DiaryEntry_FoodItem_Source).Id AS DiaryEntry_Id, 
                Key(T.DiaryEntry_FoodItem_Target).Id AS [DiaryEntry.FoodItem_Id], 
                True AS _from3
            FROM CountingKsContext.DiaryEntry_FoodItem AS T) AS T2
            ON T1.DiaryEntry_Id = T2.DiaryEntry_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DiaryEntry_Diary_Source).Id AS DiaryEntry_Id, 
                Key(T.DiaryEntry_Diary_Target).Id AS [DiaryEntry.Diary_Id], 
                True AS _from2
            FROM CountingKsContext.DiaryEntry_Diary AS T) AS T3
            ON T1.DiaryEntry_Id = T3.DiaryEntry_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DiaryEntry_Measure_Source).Id AS DiaryEntry_Id, 
                Key(T.DiaryEntry_Measure_Target).Id AS [DiaryEntry.Measure_Id], 
                True AS _from0
            FROM CountingKsContext.DiaryEntry_Measure AS T) AS T4
            ON T1.DiaryEntry_Id = T4.DiaryEntry_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Food.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Food
        [CodeFirstDatabaseSchema.Food](T1.Food_Id, T1.Food_Description)
    FROM (
        SELECT 
            T.Id AS Food_Id, 
            T.Description AS Food_Description, 
            True AS _from0
        FROM CountingKsContext.Foods AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Measure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Measure
        [CodeFirstDatabaseSchema.Measure](T3.Measure_Id, T3.Measure_Description, T3.Measure_Calories, T3.Measure_TotalFat, T3.Measure_SaturatedFat, T3.Measure_Protein, T3.Measure_Carbohydrates, T3.Measure_Fiber, T3.Measure_Sugar, T3.Measure_Sodium, T3.Measure_Iron, T3.Measure_Cholestrol, T3.[Measure.Food_Id])
    FROM (
        SELECT T1.Measure_Id, T1.Measure_Description, T1.Measure_Calories, T1.Measure_TotalFat, T1.Measure_SaturatedFat, T1.Measure_Protein, T1.Measure_Carbohydrates, T1.Measure_Fiber, T1.Measure_Sugar, T1.Measure_Sodium, T1.Measure_Iron, T1.Measure_Cholestrol, T2.[Measure.Food_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Measure_Id, 
                T.Description AS Measure_Description, 
                T.Calories AS Measure_Calories, 
                T.TotalFat AS Measure_TotalFat, 
                T.SaturatedFat AS Measure_SaturatedFat, 
                T.Protein AS Measure_Protein, 
                T.Carbohydrates AS Measure_Carbohydrates, 
                T.Fiber AS Measure_Fiber, 
                T.Sugar AS Measure_Sugar, 
                T.Sodium AS Measure_Sodium, 
                T.Iron AS Measure_Iron, 
                T.Cholestrol AS Measure_Cholestrol, 
                True AS _from0
            FROM CountingKsContext.Measures AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Measure_Food_Source).Id AS Measure_Id, 
                Key(T.Measure_Food_Target).Id AS [Measure.Food_Id], 
                True AS _from1
            FROM CountingKsContext.Measure_Food AS T) AS T2
            ON T1.Measure_Id = T2.Measure_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.Diaries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Diaries
        [WebApi.App_Data.Diary](T1.Diary_Id, T1.Diary_CurrentDate, T1.Diary_UserName)
    FROM (
        SELECT 
            T.Id AS Diary_Id, 
            T.CurrentDate AS Diary_CurrentDate, 
            T.UserName AS Diary_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.Diary AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.DiaryEntries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DiaryEntries
        [WebApi.App_Data.DiaryEntry](T1.DiaryEntry_Id, T1.DiaryEntry_Quantity) WITH 
        RELATIONSHIP(CREATEREF(CountingKsContext.Diaries, ROW(T1.[DiaryEntry_Diary.DiaryEntry_Diary_Target.Id]),[WebApi.App_Data.Diary]),[WebApi.App_Data.DiaryEntry_Diary],DiaryEntry_Diary_Source,DiaryEntry_Diary_Target) 
        RELATIONSHIP(CREATEREF(CountingKsContext.Foods, ROW(T1.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target.Id]),[WebApi.App_Data.Food]),[WebApi.App_Data.DiaryEntry_FoodItem],DiaryEntry_FoodItem_Source,DiaryEntry_FoodItem_Target) 
        RELATIONSHIP(CREATEREF(CountingKsContext.Measures, ROW(T1.[DiaryEntry_Measure.DiaryEntry_Measure_Target.Id]),[WebApi.App_Data.Measure]),[WebApi.App_Data.DiaryEntry_Measure],DiaryEntry_Measure_Source,DiaryEntry_Measure_Target) 
    FROM (
        SELECT 
            T.Id AS DiaryEntry_Id, 
            T.Quantity AS DiaryEntry_Quantity, 
            True AS _from0, 
            T.Diary_Id AS [DiaryEntry_Diary.DiaryEntry_Diary_Target.Id], 
            T.FoodItem_Id AS [DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target.Id], 
            T.Measure_Id AS [DiaryEntry_Measure.DiaryEntry_Measure_Target.Id]
        FROM CodeFirstDatabase.DiaryEntry AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.DiaryEntry_Diary.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DiaryEntry_Diary
        [WebApi.App_Data.DiaryEntry_Diary](T3.[DiaryEntry_Diary.DiaryEntry_Diary_Source], T3.[DiaryEntry_Diary.DiaryEntry_Diary_Target])
    FROM (
        SELECT -- Constructing DiaryEntry_Diary_Source
            CreateRef(CountingKsContext.DiaryEntries, row(T2.[DiaryEntry_Diary.DiaryEntry_Diary_Source.Id]), [WebApi.App_Data.DiaryEntry]) AS [DiaryEntry_Diary.DiaryEntry_Diary_Source], 
            T2.[DiaryEntry_Diary.DiaryEntry_Diary_Target]
        FROM (
            SELECT -- Constructing DiaryEntry_Diary_Target
                T1.[DiaryEntry_Diary.DiaryEntry_Diary_Source.Id], 
                CreateRef(CountingKsContext.Diaries, row(T1.[DiaryEntry_Diary.DiaryEntry_Diary_Target.Id]), [WebApi.App_Data.Diary]) AS [DiaryEntry_Diary.DiaryEntry_Diary_Target]
            FROM (
                SELECT 
                    T.Id AS [DiaryEntry_Diary.DiaryEntry_Diary_Source.Id], 
                    T.Diary_Id AS [DiaryEntry_Diary.DiaryEntry_Diary_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DiaryEntry AS T
                WHERE T.Diary_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.DiaryEntry_FoodItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DiaryEntry_FoodItem
        [WebApi.App_Data.DiaryEntry_FoodItem](T3.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Source], T3.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target])
    FROM (
        SELECT -- Constructing DiaryEntry_FoodItem_Source
            CreateRef(CountingKsContext.DiaryEntries, row(T2.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Source.Id]), [WebApi.App_Data.DiaryEntry]) AS [DiaryEntry_FoodItem.DiaryEntry_FoodItem_Source], 
            T2.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target]
        FROM (
            SELECT -- Constructing DiaryEntry_FoodItem_Target
                T1.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Source.Id], 
                CreateRef(CountingKsContext.Foods, row(T1.[DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target.Id]), [WebApi.App_Data.Food]) AS [DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target]
            FROM (
                SELECT 
                    T.Id AS [DiaryEntry_FoodItem.DiaryEntry_FoodItem_Source.Id], 
                    T.FoodItem_Id AS [DiaryEntry_FoodItem.DiaryEntry_FoodItem_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DiaryEntry AS T
                WHERE T.FoodItem_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.DiaryEntry_Measure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DiaryEntry_Measure
        [WebApi.App_Data.DiaryEntry_Measure](T3.[DiaryEntry_Measure.DiaryEntry_Measure_Source], T3.[DiaryEntry_Measure.DiaryEntry_Measure_Target])
    FROM (
        SELECT -- Constructing DiaryEntry_Measure_Source
            CreateRef(CountingKsContext.DiaryEntries, row(T2.[DiaryEntry_Measure.DiaryEntry_Measure_Source.Id]), [WebApi.App_Data.DiaryEntry]) AS [DiaryEntry_Measure.DiaryEntry_Measure_Source], 
            T2.[DiaryEntry_Measure.DiaryEntry_Measure_Target]
        FROM (
            SELECT -- Constructing DiaryEntry_Measure_Target
                T1.[DiaryEntry_Measure.DiaryEntry_Measure_Source.Id], 
                CreateRef(CountingKsContext.Measures, row(T1.[DiaryEntry_Measure.DiaryEntry_Measure_Target.Id]), [WebApi.App_Data.Measure]) AS [DiaryEntry_Measure.DiaryEntry_Measure_Target]
            FROM (
                SELECT 
                    T.Id AS [DiaryEntry_Measure.DiaryEntry_Measure_Source.Id], 
                    T.Measure_Id AS [DiaryEntry_Measure.DiaryEntry_Measure_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DiaryEntry AS T
                WHERE T.Measure_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.Foods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Foods
        [WebApi.App_Data.Food](T1.Food_Id, T1.Food_Description)
    FROM (
        SELECT 
            T.Id AS Food_Id, 
            T.Description AS Food_Description, 
            True AS _from0
        FROM CodeFirstDatabase.Food AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.Measures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Measures
        [WebApi.App_Data.Measure](T1.Measure_Id, T1.Measure_Description, T1.Measure_Calories, T1.Measure_TotalFat, T1.Measure_SaturatedFat, T1.Measure_Protein, T1.Measure_Carbohydrates, T1.Measure_Fiber, T1.Measure_Sugar, T1.Measure_Sodium, T1.Measure_Iron, T1.Measure_Cholestrol) WITH 
        RELATIONSHIP(CREATEREF(CountingKsContext.Foods, ROW(T1.[Measure_Food.Measure_Food_Target.Id]),[WebApi.App_Data.Food]),[WebApi.App_Data.Measure_Food],Measure_Food_Source,Measure_Food_Target) 
    FROM (
        SELECT 
            T.Id AS Measure_Id, 
            T.Description AS Measure_Description, 
            T.Calories AS Measure_Calories, 
            T.TotalFat AS Measure_TotalFat, 
            T.SaturatedFat AS Measure_SaturatedFat, 
            T.Protein AS Measure_Protein, 
            T.Carbohydrates AS Measure_Carbohydrates, 
            T.Fiber AS Measure_Fiber, 
            T.Sugar AS Measure_Sugar, 
            T.Sodium AS Measure_Sodium, 
            T.Iron AS Measure_Iron, 
            T.Cholestrol AS Measure_Cholestrol, 
            True AS _from0, 
            T.Food_Id AS [Measure_Food.Measure_Food_Target.Id]
        FROM CodeFirstDatabase.Measure AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CountingKsContext.Measure_Food.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Measure_Food
        [WebApi.App_Data.Measure_Food](T3.[Measure_Food.Measure_Food_Source], T3.[Measure_Food.Measure_Food_Target])
    FROM (
        SELECT -- Constructing Measure_Food_Source
            CreateRef(CountingKsContext.Measures, row(T2.[Measure_Food.Measure_Food_Source.Id]), [WebApi.App_Data.Measure]) AS [Measure_Food.Measure_Food_Source], 
            T2.[Measure_Food.Measure_Food_Target]
        FROM (
            SELECT -- Constructing Measure_Food_Target
                T1.[Measure_Food.Measure_Food_Source.Id], 
                CreateRef(CountingKsContext.Foods, row(T1.[Measure_Food.Measure_Food_Target.Id]), [WebApi.App_Data.Food]) AS [Measure_Food.Measure_Food_Target]
            FROM (
                SELECT 
                    T.Id AS [Measure_Food.Measure_Food_Source.Id], 
                    T.Food_Id AS [Measure_Food.Measure_Food_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Measure AS T
                WHERE T.Food_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
