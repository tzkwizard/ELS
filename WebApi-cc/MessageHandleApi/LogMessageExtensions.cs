// Code generated by Microsoft (R) AutoRest Code Generator 0.9.6.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WebApi;
using WebApi.Models;

namespace WebApi
{
    public static partial class LogMessageExtensions
    {
        /// <param name='operations'>
        /// Reference to the WebApi.ILogMessage.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string GetById(this ILogMessage operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILogMessage)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WebApi.ILogMessage.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetByIdAsync(this ILogMessage operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WebApi.ILogMessage.
        /// </param>
        /// <param name='esLog'>
        /// Required.
        /// </param>
        public static object Post(this ILogMessage operations, ELSLogs esLog)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ILogMessage)s).PostAsync(esLog);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WebApi.ILogMessage.
        /// </param>
        /// <param name='esLog'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this ILogMessage operations, ELSLogs esLog, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostWithOperationResponseAsync(esLog, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
